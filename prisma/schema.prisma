generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id           Int              @id @default(autoincrement())
  name         String
  address      String?
  contactNumber String
  email        String?          @unique
  admissionDate DateTime
  expiryDate   DateTime
  status       MemberStatus     @default(LIVE)
  fees         FeeCollection[]
  reminders    Reminder[]
  followUps    FollowUp[]
  attendance   Attendance[]
  seatNumber   Int?
  plan         Plan            @relation(fields: [planId], references: [id])
  planId       Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  profileImage String?

  
}

model Plan {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  duration     Int       // Duration in days
  amount       Float
  members      Member[]
  createdAt    DateTime  @default(now())
}

model FeeCollection {
  id          Int       @id @default(autoincrement())
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    Int
  amountPaid  Float
  totalAmount Float
  dueAmount   Float
  dueDate     DateTime
  status      FeeStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id         Int       @id @default(autoincrement())
  description String?
  amount      Float
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reminder {
  id         Int       @id @default(autoincrement())
  member     Member    @relation(fields: [memberId], references: [id])
  memberId   Int
  message    String
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
}

model FollowUp {
  id         Int       @id @default(autoincrement())
  member     Member    @relation(fields: [memberId], references: [id])
  memberId   Int
  followUpDate DateTime
  createdAt  DateTime  @default(now())
}

model Attendance {
  id         Int       @id @default(autoincrement())
  member     Member    @relation(fields: [memberId], references: [id])
  memberId   Int
  date       DateTime  @default(now())
  status     AttendanceStatus
  createdAt  DateTime  @default(now())
}

enum MemberStatus {
  LIVE
  EXPIRED
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}
